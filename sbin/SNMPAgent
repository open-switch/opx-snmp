#!/usr/bin/python

from pysnmp.entity import engine, config
from pysnmp import debug
from pysnmp.entity.rfc3413 import cmdrsp, context, ntforg
from pysnmp.carrier.asynsock.dgram import udp
from pysnmp.smi import builder, view, error
from pysnmp.proto.api import v2c
from pysnmp.proto.rfc1902 import Integer
from pysnmp.hlapi import ObjectIdentity

from ConfigParser import SafeConfigParser

import struct
import sys
import os

# Add MIB handlers here ...

import opx_snmp.if_handlers as ifh
import opx_snmp.sys_handlers as system

# handler functions dictionary

agent_handlers = {}

'''
Load compiled mibs, in order to export symbols to pysnmp libraries. Currently, only IF-MIB 
is supported.  To be enhanced in future to compile and load any number of MIBs
'''

# Where (compiled) MIBs are kept

mibdir = '/usr/local/lib/python2.7/dist-packages/opx_snmp'
mibdir1 = '/usr/local/lib/python2.7/dist-packages/pysnmp/smi/mibs/instances'

# snmp v3 user configurations
v3conf = '/etc/opx/snmp/snmpv3.conf'

###########################################################################
#
# Convert authentication and encryption methods from string to enum
#

authDict = {
    'usmNoAuthProtocol':config.usmNoAuthProtocol,
    'usmHMACMD5AuthProtocol':config.usmHMACMD5AuthProtocol,
    'usmHMACSHAAuthProtocol':config.usmHMACSHAAuthProtocol,
    'usmHMAC128SHA224AuthProtocol':config.usmHMAC128SHA224AuthProtocol,
    'usmHMAC192SHA256AuthProtocol':config.usmHMAC192SHA256AuthProtocol,
    'usmHMAC256SHA384AuthProtocol':config.usmHMAC256SHA384AuthProtocol,
    'usmHMAC384SHA512AuthProtocol':config.usmHMAC384SHA512AuthProtocol
        }

privDict = {
    'usmNoPrivProtocol':config.usmNoPrivProtocol,
    'usmDESPrivProtocol':config.usmDESPrivProtocol,
    'usm3DESEDEPrivProtocol':config.usm3DESEDEPrivProtocol,
    'usmAesCfb128Protocol':config.usmAesCfb128Protocol,
    'usmAesCfb192Protocol':config.usmAesCfb192Protocol,
    'usmAesCfb256Protocol':config.usmAesCfb256Protocol,
    'usmAesBlumenthalCfb192Protocol':config.usmAesBlumenthalCfb192Protocol,
    'usmAesBlumenthalCfb256Protocol':config.usmAesBlumenthalCfb256Protocol
        }

###########################################################################
#
# Load mibs
#

def loadMibs(mibBuilder, CustomMibTableColumn, CustomMibScalarInstance):
    g = {'mibBuilder': mibBuilder,
         'CustomMibTableColumn': CustomMibTableColumn,
         'CustomMibScalarInstance': CustomMibScalarInstance}

    # There should be a better way to do this...

    for mib in ['IF-MIB.py']:
        execfile(os.path.abspath(mibdir + '/' + mib), g)
  
    for mib in ['__SNMPv2-MIB.py']:
    	execfile(os.path.abspath(mibdir1 + '/' + mib), g)

###########################################################################
#
# Read version value from opx_snmp.conf file
#

def is_version_v3():
    if not system.conf_file:
        print 'no conf file existing'
        sys_obj.exit(-1)
    config = SafeConfigParser()
    config.read(system.conf_file)
    for version in [s for s in config.sections() if s.startswith('version')]:
        return config.get(version, "v3")


###########################################################################
#
# Add v2 users
#

def add_v1v2_users(snmpEngine):
    # add a v2 user with the community string public

    config.addV1System(snmpEngine, 'agent', 'public')

    # let anyone accessing 'public' read anything in the subtree below,

    config.addVacmUser(snmpEngine, 1, 'agent', 'noAuthNoPriv', readSubTree=(1,3,6,1,2,1))
    config.addVacmUser(snmpEngine, 2, 'agent', 'noAuthNoPriv', readSubTree=(1,3,6,1,2,1))


###########################################################################
#
# Add v3 users
#

def add_v3_users(snmpEngine):

    with open(v3conf) as fh:
        #skip initial comemnts
        while True:
            line = fh.readline()
            if not line.startswith('#'):
                break

        while line:
            v3list = line.split(",", 6)

            if v3list[4] == 'none':
                config.addV3User(snmpEngine, v3list[0],authDict[v3list[2]],v3list[3])
            else:
                config.addV3User(snmpEngine, v3list[0],authDict[v3list[2]],v3list[3],privDict[v3list[4]],v3list[5])

            #allow approriate read and write MIB access for each user at VACM

            oid = v3list[6].replace('(',' ').replace(')',' ').replace('\n',' ').split(',')
            oid1 = [int(y) for y in oid]
            config.addVacmUser(snmpEngine,3,v3list[0],v3list[1],tuple(oid1),tuple(oid1))
            line = fh.readline()


###########################################################################

class SNMPAgent:

    """Implements an Agent that serves MIBs
    """

    def __init__(self):

        # each SNMP-based application has an engine

        self._snmpEngine = engine.SnmpEngine()

        # open a UDP socket to listen for snmp requests

        config.addSocketTransport(self._snmpEngine, udp.domainName,
                                  udp.UdpTransport().openServerMode((''
                                  , 161)))

        if (is_version_v3() == 'yes'):
            print "SNMPAgent: version is v3"
            add_v3_users(self._snmpEngine)
        else:
            print "SNMPAgent: version is v2"
            add_v1v2_users(self._snmpEngine)

        # each app has one or more contexts

        self._snmpContext = context.SnmpContext(self._snmpEngine)

        # the builder is used to load mibs.

        mibInstrumentation = self._snmpContext.getMibInstrum()
        mibBuilder = mibInstrumentation.getMibBuilder()

        mibSources = mibBuilder.getMibSources() \
            + (builder.DirMibSource(mibdir), )
        mibBuilder.setMibSources(*mibSources)

        mibView = view.MibViewController(mibBuilder)

        # our variables will subclass this since we only have table types
        # can't load this type directly, need to import it

        (MibTable,
        MibTableRow,
        MibTableColumn,
        MibScalar,
        MibScalarInstance) = mibBuilder.importSymbols(
        'SNMPv2-SMI',
        'MibTable',
        'MibTableRow',
        'MibTableColumn',
        'MibScalar',
        'MibScalarInstance'
        )

        class CustomMibScalarInstance(MibScalarInstance):

            def getValue(self, name, idx):

                oi = ObjectIdentity(name)
                oi.resolveWithMib(mibView)
                module = oi.getMibSymbol()  # ('SNMPv2-MIB', 'sysDescr', (0,))
                print 'the module is', module

                handler_key = module[0:2]  # ('SNMPv2-MIB', 'sysDescr')
                if handler_key in agent_handlers:
                    return self.getSyntax().clone(agent_handlers[handler_key](module[1]))

        class CustomMibTableColumn(MibTableColumn):

            def __init__(self, name, syntax):
                MibTableColumn.__init__(self, name, syntax)

            def readGet(self, name, val, idx, acInfo):
                oi = ObjectIdentity(name)
                oi.resolveWithMib(mibView)
                module = oi.getMibSymbol()

                handler_key = module[0:2]
                if not all(module):
                    raise error.NoSuchInstanceError(name=name, idx=idx)
                else:
                    if handler_key not in agent_handlers:
                        raise error.NoSuchObjectError(name=name, idx=idx)

                    ret = agent_handlers[handler_key][0](module[0],
                            name)
                    if ret is None:
                        raise error.NoSuchInstanceError(name=name, idx=idx)
                    else:
                        return ret

            def readGetNext(self, name, val, idx, acInfo, oName=None):
                oi = ObjectIdentity(name)
                oi.resolveWithMib(mibView)
                module = oi.getMibSymbol()

                handler_key = module[0:2]

                if handler_key not in agent_handlers:
                    raise error.NoSuchObjectError(name=name, idx=idx)

                if not all(module):
                    ret = agent_handlers[handler_key][1](module[0],
                            name)
                else:
                    ret = agent_handlers[handler_key][2](module[0],
                            name)

                if ret is None:
                    raise error.NoSuchInstanceError(name=name, idx=idx)
                else:
                    return ret

	# load compiled mibs

        loadMibs(mibBuilder, CustomMibTableColumn,
                 CustomMibScalarInstance)

    	# load handlers

        for h in ifh.handlers:
            agent_handlers[h[0]] = h[1]

        for h in system.handlers:
            agent_handlers[h[0]] = h[1]

        # tell pysnmp to respotd to get, getnext, and getbulk

        cmdrsp.GetCommandResponder(self._snmpEngine, self._snmpContext)
        cmdrsp.NextCommandResponder(self._snmpEngine, self._snmpContext)
        cmdrsp.BulkCommandResponder(self._snmpEngine, self._snmpContext)

    def serve_forever(self):
        print 'Starting agent'
        self._snmpEngine.transportDispatcher.jobStarted(1)
        try:
            self._snmpEngine.transportDispatcher.runDispatcher()
        except:
            self._snmpEngine.transportDispatcher.closeDispatcher()
            raise


if __name__ == '__main__':
    agent = SNMPAgent()
    try:
        agent.serve_forever()
    except KeyboardInterrupt:
        print 'Shutting down'

			
